Haskell slide
 - sweet type system
 - lazy
 - good at
 - use in industry

- There’s a familiar sinking feeling I get when reading a piece of Haddock, to find myself referred to someone’s PhD thesis for a description of what’s going on. - Bryan O'Sullivan

One of our programming maxims at Jane Street is to “make illegal states unrepresentable”. - Yaron Minsky
In practice, though, the type system is a powerful tool that helps to prevent mistakes, by forcing you to do some thinking up front. It’s not something you put up with; it’s something you value, albeit after a while. One of the difficulties of crossing the Rubicon from type system outsider to insider is that it’s hard to find motivating examples in small, easily understood chunks of code, the sort of code that one writes as a beginner. The value doesn’t really begin to accrue until you’re either writing something moderately complex or refactoring existing code. - Byran O'Sullivan

Robert Martin's What Killed Smalltalk could Kill Ruby from RailsConf '09:
http://www.youtube.com/watch?v=YX3iRjKj7C0

explain prefix-notation carefully. start with more parens than necessary, lisp-like.
spend more time on map and reduce. do examples for each.

http://haskell.org/haskellwiki/Haskell_in_industry


What is Haskell Good for?
There is one good answer for what a general purpose language like Haskell is good for: writing programs in general.

For what it is used for in practice, I've three approaches to establishing that:

A tag cloud of Haskell library and app areas, weighted by frequency on Hackage.
Indicates that it is good for graphics, networking, systems programming, data structures, databases, development, text processing ...

Areas it is used in industry - a lot of DSLs, web apps, compiler design, networking, analysis, systems programming , ...
And finally, my opinion on what it is really strong at:

Problems where correctness matters, domain specific languages, and parallel and concurrent programming
-dons


Good Example: More Advanced Behavior Interpretation by Reading Type Signatures
ghci> mapM id [Just 12, Just 20, Just 14]
Just [12, 20, 14]
:: Maybe [Int]

briefly: data structures vs objects
